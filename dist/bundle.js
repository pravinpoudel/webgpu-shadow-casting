(()=>{"use strict";var __webpack_modules__={673:()=>{eval('\n;// CONCATENATED MODULE: ./src/utils/sphere.ts\nconst vertex = new Float32Array([\r\n    // float3 position, float3 normal, float2 uv\r\n    0, 1, 0, 0, 1, 0, 0.05, 1, 0, 1, 0, 0, 1, 0, 0.15, 1, 0, 1, 0, 0, 1, 0, 0.25,\r\n    1, 0, 1, 0, 0, 1, 0, 0.35, 1, 0, 1, 0, 0, 1, 0, 0.45, 1, 0, 1, 0, 0, 1, 0,\r\n    0.55, 1, 0, 1, 0, 0, 1, 0, 0.65, 1, 0, 1, 0, 0, 1, 0, 0.75, 1, 0, 1, 0, 0, 1,\r\n    0, 0.85, 1, 0, 1, 0, 0, 1, 0, 0.95, 1, 0, 1, 0, 0, 1, 0, 1.05, 1, -0.30902,\r\n    0.95106, 0, -0.30902, 0.95106, 0, 0, 0.9, -0.25, 0.95106, 0.18164, -0.25,\r\n    0.95106, 0.18164, 0.1, 0.9, -0.09549, 0.95106, 0.29389, -0.09549, 0.95106,\r\n    0.29389, 0.2, 0.9, 0.09549, 0.95106, 0.29389, 0.09549, 0.95106, 0.29389, 0.3,\r\n    0.9, 0.25, 0.95106, 0.18164, 0.25, 0.95106, 0.18164, 0.4, 0.9, 0.30902,\r\n    0.95106, 0, 0.30902, 0.95106, 0, 0.5, 0.9, 0.25, 0.95106, -0.18164, 0.25,\r\n    0.95106, -0.18164, 0.6, 0.9, 0.09549, 0.95106, -0.29389, 0.09549, 0.95106,\r\n    -0.29389, 0.7, 0.9, -0.09549, 0.95106, -0.29389, -0.09549, 0.95106, -0.29389,\r\n    0.8, 0.9, -0.25, 0.95106, -0.18164, -0.25, 0.95106, -0.18164, 0.9, 0.9,\r\n    -0.30902, 0.95106, 0, -0.30902, 0.95106, 0, 1, 0.9, -0.58779, 0.80902, 0,\r\n    -0.58779, 0.80902, 0, 0, 0.8, -0.47553, 0.80902, 0.34549, -0.47553, 0.80902,\r\n    0.34549, 0.1, 0.8, -0.18164, 0.80902, 0.55902, -0.18164, 0.80902, 0.55902,\r\n    0.2, 0.8, 0.18164, 0.80902, 0.55902, 0.18164, 0.80902, 0.55902, 0.3, 0.8,\r\n    0.47553, 0.80902, 0.34549, 0.47553, 0.80902, 0.34549, 0.4, 0.8, 0.58779,\r\n    0.80902, 0, 0.58779, 0.80902, 0, 0.5, 0.8, 0.47553, 0.80902, -0.34549,\r\n    0.47553, 0.80902, -0.34549, 0.6, 0.8, 0.18164, 0.80902, -0.55902, 0.18164,\r\n    0.80902, -0.55902, 0.7, 0.8, -0.18164, 0.80902, -0.55902, -0.18164, 0.80902,\r\n    -0.55902, 0.8, 0.8, -0.47553, 0.80902, -0.34549, -0.47553, 0.80902, -0.34549,\r\n    0.9, 0.8, -0.58779, 0.80902, 0, -0.58779, 0.80902, 0, 1, 0.8, -0.80902,\r\n    0.58779, 0, -0.80902, 0.58779, 0, 0, 0.7, -0.65451, 0.58779, 0.47553,\r\n    -0.65451, 0.58779, 0.47553, 0.1, 0.7, -0.25, 0.58779, 0.76942, -0.25, 0.58779,\r\n    0.76942, 0.2, 0.7, 0.25, 0.58779, 0.76942, 0.25, 0.58779, 0.76942, 0.3, 0.7,\r\n    0.65451, 0.58779, 0.47553, 0.65451, 0.58779, 0.47553, 0.4, 0.7, 0.80902,\r\n    0.58779, 0, 0.80902, 0.58779, 0, 0.5, 0.7, 0.65451, 0.58779, -0.47553,\r\n    0.65451, 0.58779, -0.47553, 0.6, 0.7, 0.25, 0.58779, -0.76942, 0.25, 0.58779,\r\n    -0.76942, 0.7, 0.7, -0.25, 0.58779, -0.76942, -0.25, 0.58779, -0.76942, 0.8,\r\n    0.7, -0.65451, 0.58779, -0.47553, -0.65451, 0.58779, -0.47553, 0.9, 0.7,\r\n    -0.80902, 0.58779, 0, -0.80902, 0.58779, 0, 1, 0.7, -0.95106, 0.30902, 0,\r\n    -0.95106, 0.30902, 0, 0, 0.6, -0.76942, 0.30902, 0.55902, -0.76942, 0.30902,\r\n    0.55902, 0.1, 0.6, -0.29389, 0.30902, 0.90451, -0.29389, 0.30902, 0.90451,\r\n    0.2, 0.6, 0.29389, 0.30902, 0.90451, 0.29389, 0.30902, 0.90451, 0.3, 0.6,\r\n    0.76942, 0.30902, 0.55902, 0.76942, 0.30902, 0.55902, 0.4, 0.6, 0.95106,\r\n    0.30902, 0, 0.95106, 0.30902, 0, 0.5, 0.6, 0.76942, 0.30902, -0.55902,\r\n    0.76942, 0.30902, -0.55902, 0.6, 0.6, 0.29389, 0.30902, -0.90451, 0.29389,\r\n    0.30902, -0.90451, 0.7, 0.6, -0.29389, 0.30902, -0.90451, -0.29389, 0.30902,\r\n    -0.90451, 0.8, 0.6, -0.76942, 0.30902, -0.55902, -0.76942, 0.30902, -0.55902,\r\n    0.9, 0.6, -0.95106, 0.30902, 0, -0.95106, 0.30902, 0, 1, 0.6, -1, 0, 0, -1, 0,\r\n    0, 0, 0.5, -0.80902, 0, 0.58779, -0.80902, 0, 0.58779, 0.1, 0.5, -0.30902, 0,\r\n    0.95106, -0.30902, 0, 0.95106, 0.2, 0.5, 0.30902, 0, 0.95106, 0.30902, 0,\r\n    0.95106, 0.3, 0.5, 0.80902, 0, 0.58779, 0.80902, 0, 0.58779, 0.4, 0.5, 1, 0,\r\n    0, 1, 0, 0, 0.5, 0.5, 0.80902, 0, -0.58779, 0.80902, 0, -0.58779, 0.6, 0.5,\r\n    0.30902, 0, -0.95106, 0.30902, 0, -0.95106, 0.7, 0.5, -0.30902, 0, -0.95106,\r\n    -0.30902, 0, -0.95106, 0.8, 0.5, -0.80902, 0, -0.58779, -0.80902, 0, -0.58779,\r\n    0.9, 0.5, -1, 0, 0, -1, 0, 0, 1, 0.5, -0.95106, -0.30902, 0, -0.95106,\r\n    -0.30902, 0, 0, 0.4, -0.76942, -0.30902, 0.55902, -0.76942, -0.30902, 0.55902,\r\n    0.1, 0.4, -0.29389, -0.30902, 0.90451, -0.29389, -0.30902, 0.90451, 0.2, 0.4,\r\n    0.29389, -0.30902, 0.90451, 0.29389, -0.30902, 0.90451, 0.3, 0.4, 0.76942,\r\n    -0.30902, 0.55902, 0.76942, -0.30902, 0.55902, 0.4, 0.4, 0.95106, -0.30902, 0,\r\n    0.95106, -0.30902, 0, 0.5, 0.4, 0.76942, -0.30902, -0.55902, 0.76942,\r\n    -0.30902, -0.55902, 0.6, 0.4, 0.29389, -0.30902, -0.90451, 0.29389, -0.30902,\r\n    -0.90451, 0.7, 0.4, -0.29389, -0.30902, -0.90451, -0.29389, -0.30902,\r\n    -0.90451, 0.8, 0.4, -0.76942, -0.30902, -0.55902, -0.76942, -0.30902,\r\n    -0.55902, 0.9, 0.4, -0.95106, -0.30902, 0, -0.95106, -0.30902, 0, 1, 0.4,\r\n    -0.80902, -0.58779, 0, -0.80902, -0.58779, 0, 0, 0.3, -0.65451, -0.58779,\r\n    0.47553, -0.65451, -0.58779, 0.47553, 0.1, 0.3, -0.25, -0.58779, 0.76942,\r\n    -0.25, -0.58779, 0.76942, 0.2, 0.3, 0.25, -0.58779, 0.76942, 0.25, -0.58779,\r\n    0.76942, 0.3, 0.3, 0.65451, -0.58779, 0.47553, 0.65451, -0.58779, 0.47553,\r\n    0.4, 0.3, 0.80902, -0.58779, 0, 0.80902, -0.58779, 0, 0.5, 0.3, 0.65451,\r\n    -0.58779, -0.47553, 0.65451, -0.58779, -0.47553, 0.6, 0.3, 0.25, -0.58779,\r\n    -0.76942, 0.25, -0.58779, -0.76942, 0.7, 0.3, -0.25, -0.58779, -0.76942,\r\n    -0.25, -0.58779, -0.76942, 0.8, 0.3, -0.65451, -0.58779, -0.47553, -0.65451,\r\n    -0.58779, -0.47553, 0.9, 0.3, -0.80902, -0.58779, 0, -0.80902, -0.58779, 0, 1,\r\n    0.3, -0.58779, -0.80902, 0, -0.58779, -0.80902, 0, 0, 0.2, -0.47553, -0.80902,\r\n    0.34549, -0.47553, -0.80902, 0.34549, 0.1, 0.2, -0.18164, -0.80902, 0.55902,\r\n    -0.18164, -0.80902, 0.55902, 0.2, 0.2, 0.18164, -0.80902, 0.55902, 0.18164,\r\n    -0.80902, 0.55902, 0.3, 0.2, 0.47553, -0.80902, 0.34549, 0.47553, -0.80902,\r\n    0.34549, 0.4, 0.2, 0.58779, -0.80902, 0, 0.58779, -0.80902, 0, 0.5, 0.2,\r\n    0.47553, -0.80902, -0.34549, 0.47553, -0.80902, -0.34549, 0.6, 0.2, 0.18164,\r\n    -0.80902, -0.55902, 0.18164, -0.80902, -0.55902, 0.7, 0.2, -0.18164, -0.80902,\r\n    -0.55902, -0.18164, -0.80902, -0.55902, 0.8, 0.2, -0.47553, -0.80902,\r\n    -0.34549, -0.47553, -0.80902, -0.34549, 0.9, 0.2, -0.58779, -0.80902, 0,\r\n    -0.58779, -0.80902, 0, 1, 0.2, -0.30902, -0.95106, 0, -0.30902, -0.95106, 0,\r\n    0, 0.1, -0.25, -0.95106, 0.18164, -0.25, -0.95106, 0.18164, 0.1, 0.1,\r\n    -0.09549, -0.95106, 0.29389, -0.09549, -0.95106, 0.29389, 0.2, 0.1, 0.09549,\r\n    -0.95106, 0.29389, 0.09549, -0.95106, 0.29389, 0.3, 0.1, 0.25, -0.95106,\r\n    0.18164, 0.25, -0.95106, 0.18164, 0.4, 0.1, 0.30902, -0.95106, 0, 0.30902,\r\n    -0.95106, 0, 0.5, 0.1, 0.25, -0.95106, -0.18164, 0.25, -0.95106, -0.18164,\r\n    0.6, 0.1, 0.09549, -0.95106, -0.29389, 0.09549, -0.95106, -0.29389, 0.7, 0.1,\r\n    -0.09549, -0.95106, -0.29389, -0.09549, -0.95106, -0.29389, 0.8, 0.1, -0.25,\r\n    -0.95106, -0.18164, -0.25, -0.95106, -0.18164, 0.9, 0.1, -0.30902, -0.95106,\r\n    0, -0.30902, -0.95106, 0, 1, 0.1, 0, -1, 0, 0, -1, 0, -0.05, 0, 0, -1, 0, 0,\r\n    -1, 0, 0.05, 0, 0, -1, 0, 0, -1, 0, 0.15, 0, 0, -1, 0, 0, -1, 0, 0.25, 0, 0,\r\n    -1, 0, 0, -1, 0, 0.35, 0, 0, -1, 0, 0, -1, 0, 0.45, 0, 0, -1, 0, 0, -1, 0,\r\n    0.55, 0, 0, -1, 0, 0, -1, 0, 0.65, 0, 0, -1, 0, 0, -1, 0, 0.75, 0, 0, -1, 0,\r\n    0, -1, 0, 0.85, 0, 0, -1, 0, 0, -1, 0, 0.95, 0,\r\n]);\r\nconst index = new Uint16Array([\r\n    0, 11, 12, 1, 12, 13, 2, 13, 14, 3, 14, 15, 4, 15, 16, 5, 16, 17, 6, 17, 18,\r\n    7, 18, 19, 8, 19, 20, 9, 20, 21, 12, 11, 23, 11, 22, 23, 13, 12, 24, 12, 23,\r\n    24, 14, 13, 25, 13, 24, 25, 15, 14, 26, 14, 25, 26, 16, 15, 27, 15, 26, 27,\r\n    17, 16, 28, 16, 27, 28, 18, 17, 29, 17, 28, 29, 19, 18, 30, 18, 29, 30, 20,\r\n    19, 31, 19, 30, 31, 21, 20, 32, 20, 31, 32, 23, 22, 34, 22, 33, 34, 24, 23,\r\n    35, 23, 34, 35, 25, 24, 36, 24, 35, 36, 26, 25, 37, 25, 36, 37, 27, 26, 38,\r\n    26, 37, 38, 28, 27, 39, 27, 38, 39, 29, 28, 40, 28, 39, 40, 30, 29, 41, 29,\r\n    40, 41, 31, 30, 42, 30, 41, 42, 32, 31, 43, 31, 42, 43, 34, 33, 45, 33, 44,\r\n    45, 35, 34, 46, 34, 45, 46, 36, 35, 47, 35, 46, 47, 37, 36, 48, 36, 47, 48,\r\n    38, 37, 49, 37, 48, 49, 39, 38, 50, 38, 49, 50, 40, 39, 51, 39, 50, 51, 41,\r\n    40, 52, 40, 51, 52, 42, 41, 53, 41, 52, 53, 43, 42, 54, 42, 53, 54, 45, 44,\r\n    56, 44, 55, 56, 46, 45, 57, 45, 56, 57, 47, 46, 58, 46, 57, 58, 48, 47, 59,\r\n    47, 58, 59, 49, 48, 60, 48, 59, 60, 50, 49, 61, 49, 60, 61, 51, 50, 62, 50,\r\n    61, 62, 52, 51, 63, 51, 62, 63, 53, 52, 64, 52, 63, 64, 54, 53, 65, 53, 64,\r\n    65, 56, 55, 67, 55, 66, 67, 57, 56, 68, 56, 67, 68, 58, 57, 69, 57, 68, 69,\r\n    59, 58, 70, 58, 69, 70, 60, 59, 71, 59, 70, 71, 61, 60, 72, 60, 71, 72, 62,\r\n    61, 73, 61, 72, 73, 63, 62, 74, 62, 73, 74, 64, 63, 75, 63, 74, 75, 65, 64,\r\n    76, 64, 75, 76, 67, 66, 78, 66, 77, 78, 68, 67, 79, 67, 78, 79, 69, 68, 80,\r\n    68, 79, 80, 70, 69, 81, 69, 80, 81, 71, 70, 82, 70, 81, 82, 72, 71, 83, 71,\r\n    82, 83, 73, 72, 84, 72, 83, 84, 74, 73, 85, 73, 84, 85, 75, 74, 86, 74, 85,\r\n    86, 76, 75, 87, 75, 86, 87, 78, 77, 89, 77, 88, 89, 79, 78, 90, 78, 89, 90,\r\n    80, 79, 91, 79, 90, 91, 81, 80, 92, 80, 91, 92, 82, 81, 93, 81, 92, 93, 83,\r\n    82, 94, 82, 93, 94, 84, 83, 95, 83, 94, 95, 85, 84, 96, 84, 95, 96, 86, 85,\r\n    97, 85, 96, 97, 87, 86, 98, 86, 97, 98, 89, 88, 100, 88, 99, 100, 90, 89, 101,\r\n    89, 100, 101, 91, 90, 102, 90, 101, 102, 92, 91, 103, 91, 102, 103, 93, 92,\r\n    104, 92, 103, 104, 94, 93, 105, 93, 104, 105, 95, 94, 106, 94, 105, 106, 96,\r\n    95, 107, 95, 106, 107, 97, 96, 108, 96, 107, 108, 98, 97, 109, 97, 108, 109,\r\n    100, 99, 111, 101, 100, 112, 102, 101, 113, 103, 102, 114, 104, 103, 115, 105,\r\n    104, 116, 106, 105, 117, 107, 106, 118, 108, 107, 119, 109, 108, 120,\r\n]);\r\nconst vertexCount = 121;\r\nconst indexCount = 540;\r\n\r\n\n;// CONCATENATED MODULE: ./src/utils/box.ts\nconst box_vertex = new Float32Array([\r\n    // float3 position, float3 normal, float2 uv\r\n    0.5, 0.5, 0.5, 1, 0, 0, 0, 1, 0.5, 0.5, -0.5, 1, 0, 0, 1, 1, 0.5, -0.5, 0.5,\r\n    1, 0, 0, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0, 1, 0, -0.5, 0.5, -0.5, -1, 0, 0, 0,\r\n    1, -0.5, 0.5, 0.5, -1, 0, 0, 1, 1, -0.5, -0.5, -0.5, -1, 0, 0, 0, 0, -0.5,\r\n    -0.5, 0.5, -1, 0, 0, 1, 0, -0.5, 0.5, -0.5, 0, 1, 0, 0, 1, 0.5, 0.5, -0.5, 0,\r\n    1, 0, 1, 1, -0.5, 0.5, 0.5, 0, 1, 0, 0, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 0, -0.5,\r\n    -0.5, 0.5, 0, -1, 0, 0, 1, 0.5, -0.5, 0.5, 0, -1, 0, 1, 1, -0.5, -0.5, -0.5,\r\n    0, -1, 0, 0, 0, 0.5, -0.5, -0.5, 0, -1, 0, 1, 0, -0.5, 0.5, 0.5, 0, 0, 1, 0,\r\n    1, 0.5, 0.5, 0.5, 0, 0, 1, 1, 1, -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, 0.5, -0.5,\r\n    0.5, 0, 0, 1, 1, 0, 0.5, 0.5, -0.5, 0, 0, -1, 0, 1, -0.5, 0.5, -0.5, 0, 0, -1,\r\n    1, 1, 0.5, -0.5, -0.5, 0, 0, -1, 0, 0, -0.5, -0.5, -0.5, 0, 0, -1, 1, 0,\r\n]);\r\nconst box_index = new Uint16Array([\r\n    0, 2, 1, 2, 3, 1, 4, 6, 5, 6, 7, 5, 8, 10, 9, 10, 11, 9, 12, 14, 13, 14, 15,\r\n    13, 16, 18, 17, 18, 19, 17, 20, 22, 21, 22, 23, 21,\r\n]);\r\nconst box_vertexCount = 24;\r\nconst box_indexCount = 36;\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(3);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction vec3_length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nfunction fromValues(x, y, z) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3\'s after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3\'s\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3\'s\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3\'s\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3\'s\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly \'1\'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction vec3_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nvar sub = (/* unused pure expression or super */ null && (subtract));\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nvar mul = (/* unused pure expression or super */ null && (multiply));\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nvar div = (/* unused pure expression or super */ null && (divide));\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nvar dist = (/* unused pure expression or super */ null && (distance));\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nvar sqrDist = (/* unused pure expression or super */ null && (squaredDistance));\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nvar len = (/* unused pure expression or super */ null && (vec3_length));\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nvar sqrLen = (/* unused pure expression or super */ null && (squaredLength));\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction mat4_create() {\n  var out = new ARRAY_TYPE(16);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction mat4_clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction mat4_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nfunction mat4_fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nfunction mat4_set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction mat4_multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nfunction mat4_scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction mat4_rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction mat4_rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction mat4_rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL\'s clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nvar perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal\'s clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL\'s clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nvar ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal\'s clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nfunction mat4_str(a) {\n  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4\'s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction mat4_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction mat4_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix\'s elements by\n * @returns {mat4} out\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4\'s after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b\'s elements by before adding\n * @returns {mat4} out\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction mat4_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction mat4_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nvar mat4_mul = (/* unused pure expression or super */ null && (mat4_multiply));\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nvar mat4_sub = (/* unused pure expression or super */ null && (mat4_subtract));\n;// CONCATENATED MODULE: ./src/utils/math.ts\n\r\n// return mvp matrix from given aspect, position, rotation, scale\r\nfunction getMvpMatrix(aspect, position, rotation, scale) {\r\n    // get modelView Matrix\r\n    const modelViewMatrix = getModelViewMatrix(position, rotation, scale);\r\n    // get projection Matrix\r\n    const projectionMatrix = getProjectionMatrix(aspect);\r\n    // get mvp matrix\r\n    const mvpMatrix = mat4.create();\r\n    mat4.multiply(mvpMatrix, projectionMatrix, modelViewMatrix);\r\n    // return matrix as Float32Array\r\n    return mvpMatrix;\r\n}\r\n// return modelView matrix from given position, rotation, scale\r\nfunction getModelViewMatrix(position = { x: 0, y: 0, z: 0 }, rotation = { x: 0, y: 0, z: 0 }, scale = { x: 1, y: 1, z: 1 }) {\r\n    // get modelView Matrix\r\n    const modelViewMatrix = mat4.create();\r\n    // translate position\r\n    mat4.translate(modelViewMatrix, modelViewMatrix, vec3.fromValues(position.x, position.y, position.z));\r\n    // rotate\r\n    mat4.rotateX(modelViewMatrix, modelViewMatrix, rotation.x);\r\n    mat4.rotateY(modelViewMatrix, modelViewMatrix, rotation.y);\r\n    mat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation.z);\r\n    // scale\r\n    mat4.scale(modelViewMatrix, modelViewMatrix, vec3.fromValues(scale.x, scale.y, scale.z));\r\n    // return matrix as Float32Array\r\n    return modelViewMatrix;\r\n}\r\nconst center = fromValues(0, 0, 0);\r\nconst up = fromValues(0, 1, 0);\r\nfunction getProjectionMatrix(aspect, fov = (60 / 180) * Math.PI, near = 0.1, far = 100.0, position = { x: 0, y: 0, z: 0 }) {\r\n    // create cameraview\r\n    const cameraView = mat4_create();\r\n    const eye = fromValues(position.x, position.y, position.z);\r\n    translate(cameraView, cameraView, eye);\r\n    lookAt(cameraView, eye, center, up);\r\n    // get a perspective Matrix\r\n    const projectionMatrix = mat4_create();\r\n    perspective(projectionMatrix, fov, aspect, near, far);\r\n    mat4_multiply(projectionMatrix, projectionMatrix, cameraView);\r\n    // return matrix as Float32Array\r\n    return projectionMatrix;\r\n}\r\n\r\n\n;// CONCATENATED MODULE: ./shaders/shadowV.wgsl\n/* harmony default export */ const shadowV = ("struct VertexInput{   \\r\\n @builtin(instance_index) index: u32,\\r\\n @location(0) position:vec3<f32>, \\r\\n @location(1) normal:vec3<f32>, \\r\\n @location(2) uv:vec2<f32>\\r\\n}\\r\\n\\r\\n// bindgroup input\\r\\nstruct VertexOutput{\\r\\n    @builtin(position) Position:vec4<f32>,\\r\\n    @location(0) Color: vec4<f32>,\\r\\n    @location(1) shadowPosition: vec3<f32>,\\r\\n    @location(2) fragNormal: vec3<f32>,\\r\\n};\\r\\n\\r\\n@group(0) @binding(0) var<storage> modelMatrix : array<mat4x4<f32>>;\\r\\n@group(0) @binding(1) var<storage> color:array<vec4<f32>>;\\r\\n@group(0) @binding(2) var<uniform> lightViewProjectionMatrix: mat4x4<f32>;\\r\\n@group(0) @binding(3) var<uniform> cameraViewPorjectionMatrix: mat4x4<f32>;\\r\\n\\r\\n// sampler\\r\\n@vertex\\r\\nfn main(in1:VertexInput)->VertexOutput{\\r\\n    var vo:VertexOutput;\\r\\n    vo.Position= cameraViewPorjectionMatrix*modelMatrix[in1.index]*vec4<f32>(in1.position, 1.0);\\r\\n    vo.fragNormal = vec3((modelMatrix[in1.index]*vec4<f32>(in1.normal, 1.0)).xyz);\\r\\n    vo.Color = color[in1.index];\\r\\n    var shadowPos:vec4<f32> = lightViewProjectionMatrix*vec4<f32>(in1.position, 1.0);\\r\\n    shadowPos.x = shadowPos.x*0.5 + 0.5;\\r\\n    shadowPos.y = (shadowPos.y*(-0.5)) + 0.5;\\r\\n    vo.shadowPosition = vec3(shadowPos.x, shadowPos.y, shadowPos.z);\\r\\n    return vo;\\r\\n}");\n;// CONCATENATED MODULE: ./shaders/shadowF.wgsl\n/* harmony default export */ const shadowF = ("struct shaderIn{\\r\\n @location(0) color:vec4<f32>,\\r\\n @location(1) shadowPosition:vec3<f32>,\\r\\n @location(2) fragNormal:vec3<f32>\\r\\n}\\r\\n\\r\\n@group(0) @binding(4) var<uniform> lightposition: vec3<f32>;\\r\\n@group(1) @binding(0) var comparisionSampler:sampler_comparison;\\r\\n@group(1) @binding(1) var d_texture:texture_depth_2d;\\r\\n\\r\\n@fragment\\r\\nfn main(in1:shaderIn)->@location(0) vec4<f32>{\\r\\n    var diffuseCofficient:f32 = dot(lightposition,in1.fragNormal);\\r\\n    var specular:f32 = 0.0;\\r\\n    var shadow:f32 = 0.0;\\r\\n    var lightColor:vec3<f32> = vec3<f32>(1.0);\\r\\n    var ambient:vec3<f32> = 0.6*lightColor;\\r\\n    var textureSize:vec2<f32> = vec2<f32>(textureDimensions(d_texture).xy);\\r\\n    var textelSize:vec2<f32> = vec2<f32>(1.0/textureSize.x, 1.0/textureSize.y);\\r\\n    for(var i:f32=-1.0; i<=1.0; i = i+1.0){\\r\\n        for(var j:f32= 0.0; j<=1.0; j = j+1.0){\\r\\n            var newPosition:vec2<f32> = vec2<f32>(in1.shadowPosition.x + i*textelSize.x , in1.shadowPosition.y + j*textelSize.y);\\r\\n            var sampledResult:f32 = textureSampleCompare(d_texture, comparisionSampler, newPosition.xy, in1.shadowPosition.z);    \\r\\n            shadow += sampledResult;\\r\\n        }\\r\\n    }\\r\\n    shadow = shadow/9.0; \\r\\n    var effectiveDiffuse:f32 = diffuseCofficient*shadow;\\r\\n    var lighting:vec4<f32> = vec4(ambient, 1.0)*in1.color;\\r\\n    return vec4(1.0, 1.0, 0.0, 1.0);\\r\\n}");\n;// CONCATENATED MODULE: ./shaders/shadowDepth.wgsl\n/* harmony default export */ const shadowDepth = ("@group(0) @binding(0) var<storage> modelViewMatrix: array<mat4x4<f32>>;\\r\\n@group(0) @binding(1) var<uniform> lightProjectionMatrix: mat4x4<f32>;\\r\\n\\r\\n@vertex\\r\\nfn main(@location(0) position:vec3<f32>, @builtin(instance_index) index:u32)->@builtin(position) vec4<f32>{\\r\\n    return lightProjectionMatrix* modelViewMatrix[index]* vec4(position, 1.0);\\r\\n}");\n;// CONCATENATED MODULE: ./src/shadowMapping.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const canvas: HTMLCanvasElement;\r\nlet device, context, format, size, sphereVertexBuffer, sphereIndicesBuffer, boxVertexBuffer, boxIndicesBuffer, _shadowPipeline, _renderingPipeline, _MBuffer, _LProjectionBuffer, _CViewProjectionBuffer, \r\n// _CProjectionBuffer: GPUBuffer,\r\n_dLBuffer, _colorBuffer, _shaderPipelineDesc_Primitive, _shaderPipelineDesc_depth, shadowDepthTexture, renderDepthTexture, shadowPassDescriptor, renderpassDescriptor, _shaderPipelineDesc_VB, shadowBindGroup, renderBindGroup0, renderBindGroup1;\r\nconst xCount = 4;\r\nconst yCount = 4;\r\nconst lightPosition = [20.0, 100.0, 50.0];\r\nlet cameraPosition = { x: 0, y: 10, z: 10 };\r\nlet eyePosition = fromValues(cameraPosition.x, cameraPosition.y, cameraPosition.z);\r\nlet targetPosition = fromValues(0, 0, 0);\r\n//orthographic projection dimension\r\nconst left = -40;\r\nconst right = 40;\r\nconst bottom = -40;\r\nconst shadowMapping_top = 40;\r\nconst near = -50;\r\nconst far = 200;\r\nconst screenCanvas = (document.getElementById("main-screen"));\r\n(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    function init(canvas) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const entry = navigator.gpu;\r\n            if (!entry) {\r\n                console.warn("webgpu is not supported in your browser !!!");\r\n            }\r\n            const adapter = yield entry.requestAdapter();\r\n            if (!adapter) {\r\n                throw new Error("adapter not found");\r\n            }\r\n            device = yield adapter.requestDevice();\r\n            if (!device) {\r\n                console.warn("no device found in the adapter");\r\n            }\r\n            context = canvas.getContext("webgpu");\r\n            console.log(context);\r\n            if (!context) {\r\n                return;\r\n            }\r\n            // need to find what is this for ??\r\n            format = navigator.gpu.getPreferredCanvasFormat();\r\n            canvas.width = canvas.clientWidth * (window.devicePixelRatio || 1);\r\n            canvas.height = canvas.clientHeight * (window.devicePixelRatio || 1);\r\n            context.configure({\r\n                device: device,\r\n                format: "bgra8unorm",\r\n            });\r\n            size = { width: canvas.width, height: canvas.height };\r\n        });\r\n    }\r\n    function stages() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield init(screenCanvas);\r\n            yield initShadowPipeline();\r\n            yield initVertexBuffer();\r\n            yield rBufferInit();\r\n            yield sBufferInit();\r\n            yield initInstancedBuffer();\r\n            yield initRenderingPipeline();\r\n            createDepthTexture();\r\n            createRenderPassDescriptor();\r\n        });\r\n    }\r\n    yield stages();\r\n    function initShadowPipeline() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _shaderPipelineDesc_VB = [\r\n                {\r\n                    arrayStride: 8 * 4,\r\n                    attributes: [\r\n                        {\r\n                            shaderLocation: 0,\r\n                            offset: 0,\r\n                            format: "float32x3",\r\n                        },\r\n                        {\r\n                            shaderLocation: 1,\r\n                            offset: 3 * 4,\r\n                            format: "float32x3",\r\n                        },\r\n                        {\r\n                            shaderLocation: 2,\r\n                            offset: 6 * 4,\r\n                            format: "float32x2",\r\n                        },\r\n                    ],\r\n                },\r\n            ];\r\n            _shaderPipelineDesc_Primitive = {\r\n                topology: "triangle-list",\r\n                cullMode: "back",\r\n            };\r\n            _shaderPipelineDesc_depth = {\r\n                depthWriteEnabled: true,\r\n                depthCompare: "less",\r\n                format: "depth32float",\r\n            };\r\n            const _vsShaderModule = device.createShaderModule({\r\n                code: shadowDepth,\r\n            });\r\n            _shadowPipeline = (yield device.createRenderPipeline({\r\n                label: "light View Depth Pipeline",\r\n                layout: "auto",\r\n                vertex: {\r\n                    module: _vsShaderModule,\r\n                    entryPoint: "main",\r\n                    buffers: _shaderPipelineDesc_VB,\r\n                },\r\n                primitive: _shaderPipelineDesc_Primitive,\r\n                depthStencil: _shaderPipelineDesc_depth,\r\n            }));\r\n        });\r\n    }\r\n    function initVertexBuffer() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            sphereVertexBuffer = device.createBuffer({\r\n                label: "sphere vertex store buffer",\r\n                size: vertex.byteLength,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: true,\r\n            });\r\n            var stagingData = new Float32Array(sphereVertexBuffer.getMappedRange());\r\n            stagingData.set(vertex);\r\n            sphereVertexBuffer.unmap();\r\n            sphereIndicesBuffer = device.createBuffer({\r\n                label: "sphere indices store buffer",\r\n                size: index.byteLength,\r\n                usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: true,\r\n            });\r\n            var stagingData2 = new Uint16Array(sphereIndicesBuffer.getMappedRange());\r\n            stagingData2.set(index);\r\n            sphereIndicesBuffer.unmap();\r\n            boxVertexBuffer = device.createBuffer({\r\n                label: "box vertex store buffer",\r\n                size: box_vertex.byteLength,\r\n                usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: true,\r\n            });\r\n            var stagingData = new Float32Array(boxVertexBuffer.getMappedRange());\r\n            stagingData.set(box_vertex);\r\n            boxVertexBuffer.unmap();\r\n            boxIndicesBuffer = device.createBuffer({\r\n                label: "box indices store buffer",\r\n                size: box_index.byteLength,\r\n                usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: true,\r\n            });\r\n            var stagingData2 = new Uint16Array(boxIndicesBuffer.getMappedRange());\r\n            stagingData2.set(box_index);\r\n            boxIndicesBuffer.unmap();\r\n        });\r\n    }\r\n    function sBufferInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let lightViewMatrix = mat4_create();\r\n            lookAt(lightViewMatrix, fromValues(lightPosition[0], lightPosition[1], lightPosition[2]), targetPosition, fromValues(0, 1, 0));\r\n            let lightViewProjectionMatrix = mat4_create();\r\n            ortho(lightViewProjectionMatrix, left, right, bottom, shadowMapping_top, near, far);\r\n            mat4_multiply(lightViewProjectionMatrix, lightViewProjectionMatrix, lightViewMatrix);\r\n            _LProjectionBuffer = device.createBuffer({\r\n                size: 16 * 4,\r\n                usage: GPUBufferUsage.UNIFORM,\r\n                mappedAtCreation: true,\r\n            });\r\n            var mappedLightArray = new Float32Array(_LProjectionBuffer.getMappedRange());\r\n            mappedLightArray.set(lightViewProjectionMatrix);\r\n            _LProjectionBuffer.unmap();\r\n            _dLBuffer = device.createBuffer({\r\n                size: 3 * 4,\r\n                usage: GPUBufferUsage.UNIFORM,\r\n                mappedAtCreation: true,\r\n            });\r\n            var mappedArray = new Float32Array(_dLBuffer.getMappedRange());\r\n            mappedArray.set(lightPosition);\r\n            _dLBuffer.unmap();\r\n        });\r\n    }\r\n    function rBufferInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const viewMatrix = mat4_create();\r\n            lookAt(viewMatrix, eyePosition, targetPosition, fromValues(0, 0, 0));\r\n            let cameraProjectionMatrix = getProjectionMatrix(screenCanvas.width / screenCanvas.height, 0.5 * Math.PI, 0.1, 1000, cameraPosition);\r\n            const cameraViewProjectionMatrix = mat4_create();\r\n            mat4_multiply(cameraViewProjectionMatrix, viewMatrix, cameraProjectionMatrix);\r\n            _CViewProjectionBuffer = device.createBuffer({\r\n                size: 16 * 4,\r\n                usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\r\n                mappedAtCreation: true,\r\n            });\r\n            let viewMatrixStagingBuff = new Float32Array(_CViewProjectionBuffer.getMappedRange());\r\n            viewMatrixStagingBuff.set(viewMatrix);\r\n            _CViewProjectionBuffer.unmap();\r\n            // _CProjectionBuffer = device.createBuffer({\r\n            //   size: 16 * 4,\r\n            //   usage: GPUBufferUsage.UNIFORM,\r\n            //   mappedAtCreation: true,\r\n            // });\r\n            // var mappedArray = new Float32Array(_CProjectionBuffer.getMappedRange());\r\n            // mappedArray.set(cameraProjectionMatrix);\r\n            // _CProjectionBuffer.unmap();\r\n        });\r\n    }\r\n    function initInstancedBuffer() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _MBuffer = device.createBuffer({\r\n                size: xCount * yCount * 16 * 4,\r\n                usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: true,\r\n            });\r\n            let mStagedArray = new Float32Array(_MBuffer.getMappedRange());\r\n            _colorBuffer = device.createBuffer({\r\n                size: xCount * yCount * 4 * 4,\r\n                usage: GPUBufferUsage.UNIFORM,\r\n                mappedAtCreation: true,\r\n            });\r\n            let colorStagedArray = new Float32Array(_colorBuffer.getMappedRange());\r\n            const modelMatrices = new Array(xCount * yCount);\r\n            // const modelMatricesData = new Float32Array(xCount * yCount * 16 * 4);\r\n            const colorData = new Array(xCount * yCount);\r\n            // const colorDataSet = new Float32Array(xCount * yCount * 4);\r\n            {\r\n                let count = 0;\r\n                let localPositionReference = { x: 0, y: 0, z: 0 };\r\n                for (let i = 0; i < xCount; i++) {\r\n                    for (let j = 0; j < yCount; j++) {\r\n                        localPositionReference.x = -7.0 + Math.random() * 20.0;\r\n                        localPositionReference.y = -10 + Math.random() * 25.0;\r\n                        localPositionReference.z = -5 + Math.random() * 20;\r\n                        modelMatrices[count] = mat4_create();\r\n                        translate(modelMatrices[count], modelMatrices[count], fromValues(localPositionReference.x, localPositionReference.y, localPositionReference.z));\r\n                        mStagedArray.set(modelMatrices[count], 16 * count);\r\n                        // modelMatricesData.set(modelMatrices[count], count * 16);\r\n                        colorData[count] = [Math.random(), Math.random(), Math.random()];\r\n                        colorStagedArray.set(colorData[count], count * 4);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            _MBuffer.unmap();\r\n            _colorBuffer.unmap();\r\n        });\r\n    }\r\n    function createBindGroup() {\r\n        shadowBindGroup = device.createBindGroup({\r\n            label: "show mapping bind group",\r\n            layout: _shadowPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: _LProjectionBuffer,\r\n                    },\r\n                }\r\n            ],\r\n        });\r\n        renderBindGroup0 = device.createBindGroup({\r\n            label: "render shaderpass bind group 0",\r\n            layout: _renderingPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: _MBuffer\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: _colorBuffer\r\n                    }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: {\r\n                        buffer: _LProjectionBuffer\r\n                    }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    resource: {\r\n                        buffer: _CViewProjectionBuffer\r\n                    }\r\n                },\r\n                {\r\n                    binding: 4,\r\n                    resource: {\r\n                        buffer: _dLBuffer\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        renderBindGroup1 = device.createBindGroup({\r\n            label: "render shaderpass bind group 1",\r\n            layout: _renderingPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: device.createSampler({\r\n                        compare: "less"\r\n                    })\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: shadowDepthTexture.createView()\r\n                },\r\n            ]\r\n        });\r\n    }\r\n    function initRenderingPipeline() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const vertexModule = device.createShaderModule({ code: shadowV });\r\n            const fragmentModule = device.createShaderModule({ code: shadowF });\r\n            const _shaderFragmentDesc = {\r\n                module: fragmentModule,\r\n                entryPoint: "main",\r\n                targets: [\r\n                    {\r\n                        format: format,\r\n                    },\r\n                ],\r\n            };\r\n            _renderingPipeline = (yield device.createRenderPipeline({\r\n                label: "render pipeline",\r\n                layout: "auto",\r\n                vertex: {\r\n                    module: vertexModule,\r\n                    entryPoint: "main",\r\n                    buffers: _shaderPipelineDesc_VB,\r\n                },\r\n                fragment: _shaderFragmentDesc,\r\n                primitive: _shaderPipelineDesc_Primitive,\r\n                depthStencil: _shaderPipelineDesc_depth,\r\n            }));\r\n        });\r\n    }\r\n    function createDepthTexture() {\r\n        shadowDepthTexture = device.createTexture({\r\n            size: [screenCanvas.width, screenCanvas.height, 1],\r\n            format: "depth32float",\r\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        renderDepthTexture = device.createTexture({\r\n            size: [screenCanvas.width, screenCanvas.height, 1],\r\n            format: "depth32float",\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n    }\r\n    function createRenderPassDescriptor() {\r\n        shadowPassDescriptor = {\r\n            colorAttachments: [],\r\n            depthStencilAttachment: {\r\n                view: shadowDepthTexture.createView(),\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: "clear",\r\n                depthStoreOp: "store",\r\n            },\r\n        };\r\n        renderpassDescriptor = {\r\n            colorAttachments: [\r\n                {\r\n                    view: undefined,\r\n                    loadOp: "clear",\r\n                    storeOp: "store",\r\n                },\r\n            ],\r\n            depthStencilAttachment: {\r\n                view: renderDepthTexture.createView(),\r\n                depthLoadOp: "clear",\r\n                depthStoreOp: "store",\r\n            },\r\n        };\r\n    }\r\n    function drawMultipleInstances(pass) {\r\n        pass.setVertexBuffer(0, sphereVertexBuffer);\r\n        pass.setIndexBuffer(sphereIndicesBuffer, "uint16");\r\n        pass.drawIndexed(indexCount, (xCount * yCount) / 2);\r\n        pass.setVertexBuffer(0, boxVertexBuffer);\r\n        pass.setIndexBuffer(boxIndicesBuffer, "uint16");\r\n        pass.drawIndexed(box_indexCount, (xCount * yCount) / 2);\r\n    }\r\n    function render() {\r\n        const depthEncoder = device.createCommandEncoder();\r\n        renderpassDescriptor.colorAttachments[0].view = context\r\n            .getCurrentTexture()\r\n            .createView();\r\n        const depthRenderPass = depthEncoder.beginRenderPass(shadowPassDescriptor);\r\n        depthRenderPass.setPipeline(_shadowPipeline);\r\n        depthRenderPass.setBindGroup(0, shadowBindGroup);\r\n        drawMultipleInstances(depthRenderPass);\r\n        depthRenderPass.end();\r\n        const renderingPass = depthEncoder.beginRenderPass(renderpassDescriptor);\r\n        renderingPass.setPipeline(_renderingPipeline);\r\n        renderingPass.setBindGroup(0, renderBindGroup0);\r\n        renderingPass.setBindGroup(1, renderBindGroup1);\r\n        drawMultipleInstances(renderingPass);\r\n        renderingPass.end();\r\n        requestAnimationFrame(render);\r\n    }\r\n    render();\r\n    // async function initInstancedBuffer() {\r\n    //   let cameraProjectionMatrix = getProjectionMatrix(\r\n    //     screenCanvas.width / screenCanvas.height,\r\n    //     0.5 * Math.PI,\r\n    //     0.1,\r\n    //     1000,\r\n    //     cameraPosition\r\n    //   );\r\n    //   // we will create and pass whole MVP of light\r\n    //   let lightViewProjectionMatrix = mat4.create();\r\n    //   mat4.ortho(lightViewProjectionMatrix, -40, 40, -40, 40, -50, 200);\r\n    //   let lightViewMatrix = mat4.create();\r\n    //   mat4.lookAt(\r\n    //     lightViewMatrix,\r\n    //     vec3.fromValues(lightPosition[0], lightPosition[1], lightPosition[2]),\r\n    //     vec3.fromValues(0, 0, 0),\r\n    //     vec3.fromValues(0, 1, 0)\r\n    //   );\r\n    //   mat4.multiply(\r\n    //     lightViewProjectionMatrix,\r\n    //     lightViewProjectionMatrix,\r\n    //     lightViewMatrix\r\n    //   );\r\n    //   const viewMatrix = mat4.create();\r\n    //   mat4.lookAt(\r\n    //     viewMatrix,\r\n    //     eyePosition,\r\n    //     targetPosition,\r\n    //     vec3.fromValues(0, 0, 0)\r\n    //   );\r\n    //   _dLBuffer = device.createBuffer({\r\n    //     size: 3 * 4,\r\n    //     usage: GPUBufferUsage.UNIFORM,\r\n    //     mappedAtCreation: true,\r\n    //   });\r\n    //   var mappedArray = new Float32Array(_dLBuffer.getMappedRange());\r\n    //   mappedArray.set(lightPosition);\r\n    //   _dLBuffer.unmap();\r\n    //   // check the limit of Uniform\r\n    //   _CProjectionMatrix = device.createBuffer({\r\n    //     size: 16 * 4,\r\n    //     usage: GPUBufferUsage.UNIFORM,\r\n    //     mappedAtCreation: true,\r\n    //   });\r\n    //   var mappedArray = new Float32Array(_CProjectionMatrix.getMappedRange());\r\n    //   mappedArray.set(cameraProjectionMatrix);\r\n    //   _LProjectionMatrix = device.createBuffer({\r\n    //     size: 16 * 4,\r\n    //     usage: GPUBufferUsage.UNIFORM,\r\n    //     mappedAtCreation: true,\r\n    //   });\r\n    //   _MVBuffer = device.createBuffer({\r\n    //     usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    //     size: numInstances * 16,\r\n    //     mappedAtCreation: true,\r\n    //   });\r\n    //   _colorBuffer = device.createBuffer({\r\n    //     size: numInstances * 4 * 4,\r\n    //     usage: GPUBufferUsage.UNIFORM,\r\n    //     mappedAtCreation: true,\r\n    //   });\r\n    // }\r\n    // initShaderBuffer();\r\n    //_shadowPipeline.setVertexBuffer(0, sphereVertexBuffer);\r\n    //\r\n    // // in sphere there is vertex count as well but that vertex count is number of vertex in that mesh not number of vec3\r\n    // const sphereVertexBuffer = device.createBuffer({\r\n    //     size: sphere.vertex.byteLength,\r\n    //     usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n    //     mappedAtCreation: true\r\n    // });\r\n    // const sphereIndicesBuffer = device.createBuffer({\r\n    //     size: sphere.index.byteLength,\r\n    //     usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\r\n    //     mappedAtCreation: true\r\n    // });\r\n    // const boxVertexBuffer = device.createBuffer({\r\n    //     size: box.vertices.byteLength,\r\n    //     usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n    //     mappedAtCreation: true\r\n    // });\r\n    // const boxIndicesBuffer = device.createBuffer({\r\n    //     size: box.vertices.byteLength,\r\n    //     usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\r\n    //     mappedAtCreation: true\r\n    // });\r\n    // const sphereBuffer = {\r\n    //     vertex:\r\n    //     index:\r\n    // }\r\n    // const boxBuffer = {\r\n    //     vertex:\r\n    //     indices:\r\n    // }\r\n    // device.queue.writeBuffer(sphereBuffer.vertex, 0, sphereBuffer.vertex);\r\n    // device.queue.writeBuffer(sphereBuffer.indices, 0, sphereBuffer.indices);\r\n    // device.queue.writeBuffer(boxBuffer.vertex, 0, boxBuffer.vertex);\r\n    // device.queue.writeBuffer(boxBuffer.indices, 0, boxBuffer.indices);\r\n}))();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///673\n')}},__webpack_exports__={};__webpack_modules__[673]()})();